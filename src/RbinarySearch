Question No.1
public class RbinarySrearch {
    static   int mid;
    static  int[]arr={1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,23,24,25,26,45,46,56,57,78};
    static int recursionBS(int low, int high, int key ){
        if(low==high){
            if(key==arr[low]){
               return low;
            }else {
                return -1;
            }
        }
        else {
            mid = (low+high)/2;
            if(key==arr[mid]){
                return mid;
            }
            if(key<arr[mid]){
               return recursionBS(low,mid-1,key);
            }
            if(key>arr[mid]){
                return recursionBS(mid+1,high,key);
            }
        }
        return -1;
    }
    public static void main(String[]ss){
      int index=  recursionBS(0,arr.length,16);
      System.out.println(index);
    }
}

//question No.2

 public static int fibRecur(int tn){

        if(tn ==0)
            return 0;
        if(tn==1 || tn == 2)
            return 1;

        return fibRecur(tn-1)+fibRecur(tn-2);

    }
    
    
    Question No.3 has a doubt on leetcode



Question NO 4:

public class FindIndexByBinarySearch {

    static int findIndexBinarySearch(int[]a,int key){
        int low =0, high =a.length-1;
        int mid = low +(high-low)/2;


       while (low<=high){

           if(a[mid]==key){
               return mid;
           }if(a[mid]>key){
               high = mid-1;
           }else{
               low = mid+1;
           }
       }
       return -1;
    }

    public static void main(String[]ss){
        int[]arr = {12,13,14,15,16,17,18,67};
       int index= findIndexBinarySearch(arr,16);
       System.out.println(index);
    }
}
